/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "db_proxy_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace mooon { namespace db_proxy {


Condition::~Condition() throw() {
}


void Condition::__set_op(const std::string& val) {
  this->op = val;
}

void Condition::__set_left(const std::string& val) {
  this->left = val;
}

void Condition::__set_right(const std::string& val) {
  this->right = val;
}

void Condition::__set_is_string(const bool val) {
  this->is_string = val;
}

const char* Condition::ascii_fingerprint = "557CE3E1F35DD5D74A3999FB1200CAB8";
const uint8_t Condition::binary_fingerprint[16] = {0x55,0x7C,0xE3,0xE1,0xF3,0x5D,0xD5,0xD7,0x4A,0x39,0x99,0xFB,0x12,0x00,0xCA,0xB8};

uint32_t Condition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->op);
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->left);
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->right);
          this->__isset.right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_string);
          this->__isset.is_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Condition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Condition");

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->right);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_string", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->is_string);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Condition &a, Condition &b) {
  using ::std::swap;
  swap(a.op, b.op);
  swap(a.left, b.left);
  swap(a.right, b.right);
  swap(a.is_string, b.is_string);
  swap(a.__isset, b.__isset);
}

Condition::Condition(const Condition& other0) {
  op = other0.op;
  left = other0.left;
  right = other0.right;
  is_string = other0.is_string;
  __isset = other0.__isset;
}
Condition& Condition::operator=(const Condition& other1) {
  op = other1.op;
  left = other1.left;
  right = other1.right;
  is_string = other1.is_string;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Condition& obj) {
  using apache::thrift::to_string;
  out << "Condition(";
  out << "op=" << to_string(obj.op);
  out << ", " << "left=" << to_string(obj.left);
  out << ", " << "right=" << to_string(obj.right);
  out << ", " << "is_string=" << to_string(obj.is_string);
  out << ")";
  return out;
}

}} // namespace
