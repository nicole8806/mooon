/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef db_proxy_TYPES_H
#define db_proxy_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace mooon { namespace db_proxy {

typedef std::vector<std::string>  DBRow;

typedef std::vector<DBRow>  DBTable;

class Condition;

typedef struct _Condition__isset {
  _Condition__isset() : op(false), left(false), right(false), is_string(true) {}
  bool op :1;
  bool left :1;
  bool right :1;
  bool is_string :1;
} _Condition__isset;

class Condition {
 public:

  Condition(const Condition&);
  Condition& operator=(const Condition&);
  Condition() : op(), left(), right(), is_string(false) {
  }

  virtual ~Condition() throw();
  std::string op;
  std::string left;
  std::string right;
  bool is_string;

  _Condition__isset __isset;

  void __set_op(const std::string& val);

  void __set_left(const std::string& val);

  void __set_right(const std::string& val);

  void __set_is_string(const bool val);

  bool operator == (const Condition & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(left == rhs.left))
      return false;
    if (!(right == rhs.right))
      return false;
    if (!(is_string == rhs.is_string))
      return false;
    return true;
  }
  bool operator != (const Condition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Condition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Condition &a, Condition &b);

inline std::ostream& operator<<(std::ostream& out, const Condition& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
