/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReportSelfService_H
#define ReportSelfService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "report_self_types.h"

namespace mooon {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReportSelfServiceIf {
 public:
  virtual ~ReportSelfServiceIf() {}
  virtual void report(const std::vector<std::string> & tokens) = 0;
};

class ReportSelfServiceIfFactory {
 public:
  typedef ReportSelfServiceIf Handler;

  virtual ~ReportSelfServiceIfFactory() {}

  virtual ReportSelfServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReportSelfServiceIf* /* handler */) = 0;
};

class ReportSelfServiceIfSingletonFactory : virtual public ReportSelfServiceIfFactory {
 public:
  ReportSelfServiceIfSingletonFactory(const boost::shared_ptr<ReportSelfServiceIf>& iface) : iface_(iface) {}
  virtual ~ReportSelfServiceIfSingletonFactory() {}

  virtual ReportSelfServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReportSelfServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ReportSelfServiceIf> iface_;
};

class ReportSelfServiceNull : virtual public ReportSelfServiceIf {
 public:
  virtual ~ReportSelfServiceNull() {}
  void report(const std::vector<std::string> & /* tokens */) {
    return;
  }
};

typedef struct _ReportSelfService_report_args__isset {
  _ReportSelfService_report_args__isset() : tokens(false) {}
  bool tokens :1;
} _ReportSelfService_report_args__isset;

class ReportSelfService_report_args {
 public:

  ReportSelfService_report_args(const ReportSelfService_report_args&);
  ReportSelfService_report_args& operator=(const ReportSelfService_report_args&);
  ReportSelfService_report_args() {
  }

  virtual ~ReportSelfService_report_args() throw();
  std::vector<std::string>  tokens;

  _ReportSelfService_report_args__isset __isset;

  void __set_tokens(const std::vector<std::string> & val);

  bool operator == (const ReportSelfService_report_args & rhs) const
  {
    if (!(tokens == rhs.tokens))
      return false;
    return true;
  }
  bool operator != (const ReportSelfService_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSelfService_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReportSelfService_report_pargs {
 public:


  virtual ~ReportSelfService_report_pargs() throw();
  const std::vector<std::string> * tokens;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReportSelfService_report_result {
 public:

  ReportSelfService_report_result(const ReportSelfService_report_result&);
  ReportSelfService_report_result& operator=(const ReportSelfService_report_result&);
  ReportSelfService_report_result() {
  }

  virtual ~ReportSelfService_report_result() throw();

  bool operator == (const ReportSelfService_report_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReportSelfService_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSelfService_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReportSelfService_report_presult {
 public:


  virtual ~ReportSelfService_report_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReportSelfServiceClient : virtual public ReportSelfServiceIf {
 public:
  ReportSelfServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReportSelfServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void report(const std::vector<std::string> & tokens);
  void send_report(const std::vector<std::string> & tokens);
  void recv_report();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReportSelfServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ReportSelfServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReportSelfServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReportSelfServiceProcessor(boost::shared_ptr<ReportSelfServiceIf> iface) :
    iface_(iface) {
    processMap_["report"] = &ReportSelfServiceProcessor::process_report;
  }

  virtual ~ReportSelfServiceProcessor() {}
};

class ReportSelfServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReportSelfServiceProcessorFactory(const ::boost::shared_ptr< ReportSelfServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ReportSelfServiceIfFactory > handlerFactory_;
};

class ReportSelfServiceMultiface : virtual public ReportSelfServiceIf {
 public:
  ReportSelfServiceMultiface(std::vector<boost::shared_ptr<ReportSelfServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReportSelfServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ReportSelfServiceIf> > ifaces_;
  ReportSelfServiceMultiface() {}
  void add(boost::shared_ptr<ReportSelfServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void report(const std::vector<std::string> & tokens) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report(tokens);
    }
    ifaces_[i]->report(tokens);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReportSelfServiceConcurrentClient : virtual public ReportSelfServiceIf {
 public:
  ReportSelfServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReportSelfServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void report(const std::vector<std::string> & tokens);
  int32_t send_report(const std::vector<std::string> & tokens);
  void recv_report(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
